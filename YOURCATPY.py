import os
import logging
import json
import random
import asyncio
import requests
import threading
import time
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from flask import Flask
from threading import Thread
import urllib3
from concurrent.futures import ThreadPoolExecutor

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
REPL_OWNER = "timabrilevich"
REPL_SLUG = "KittyCitySuperBot-1"
YANDEX_TOKEN = "y0__xDo1ejABhjblgMgr8ek6xT0N1yRgkT9l_OLaTYIDPPD5wSscA"
BOT_TOKEN = os.getenv("BOT_TOKEN", "8429919809:AAE5lMwVmH86X58JFDxYRPA3bDbFMgSgtsw")
ADMIN_ID = int(os.getenv("ADMIN_ID", "5531546741"))

print(f"üöÄ Replit Info: {REPL_OWNER}.{REPL_SLUG}")

# === URL –¥–ª—è —Å–∞–º–æ–ø–∏–Ω–≥–æ–≤ ===
SELF_URLS = [
    f"https://{REPL_SLUG}.{REPL_OWNER}.repl.co/",
    f"https://{REPL_SLUG}.{REPL_OWNER}.repl.co/ping", 
    f"https://{REPL_SLUG}.{REPL_OWNER}.repl.co/health",
    f"https://{REPL_SLUG}.{REPL_OWNER}.repl.co/status",
    f"https://{REPL_SLUG}.{REPL_OWNER}.repl.co/api/v1/keepalive"
]

# === HYPER-PING –°–ï–†–í–ò–° ===
app = Flask(__name__)

@app.route('/')
def home(): 
    return f"üê± Kitty Bot 24/7 | {datetime.now().strftime('%H:%M:%S')} | Users: {len(users_db)}"

@app.route('/ping')
def ping(): return "pong"

@app.route('/health')
def health(): return "OK"

@app.route('/status')
def status(): return "üü¢ ONLINE"

@app.route('/api/v1/keepalive')
def keepalive(): return {"status": "active", "timestamp": datetime.now().isoformat()}

@app.route('/api/v1/stats')
def stats(): 
    return {
        "users": len(users_db),
        "uptime": str(datetime.now() - start_time),
        "last_ping": last_ping_time.strftime('%H:%M:%S'),
        "ping_count": ping_count
    }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–∏–Ω–≥–æ–≤
start_time = datetime.now()
last_ping_time = datetime.now()
ping_count = 0
users_db = {}
promocodes_db = {}

# === –ê–ì–†–ï–°–°–ò–í–ù–´–ï –ü–ò–ù–ì–ò ===
def hyper_ping_worker(url):
    """–†–∞–±–æ—á–∏–π –¥–ª—è –ø–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ URL"""
    try:
        response = requests.get(url, timeout=10, verify=False)
        return f"‚úÖ {url} - {response.status_code}"
    except Exception as e:
        return f"‚ùå {url} - {str(e)}"

def hyper_pinging():
    """–ì–ò–ü–ï–†-–ê–ì–†–ï–°–°–ò–í–ù–´–ï –ü–ò–ù–ì–ò 24/7"""
    global last_ping_time, ping_count
    
    # –û–ß–ï–ù–¨ —á–∞—Å—Ç—ã–µ –ø–∏–Ω–≥–∏ - –∫–∞–∂–¥—ã–µ 30-90 —Å–µ–∫—É–Ω–¥!
    ping_intervals = [30, 45, 60, 75, 90]  # –°–ª—É—á–∞–π–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    
    while True:
        try:
            current_interval = random.choice(ping_intervals)
            
            # –í–Ω–µ—à–Ω–∏–µ –ø–∏–Ω–≥–∏ –¥–ª—è —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            external_urls = [
                "https://www.google.com",
                "https://api.telegram.org",
                "https://yandex.ru",
                "https://github.com",
                "https://stackoverflow.com",
                "https://httpbin.org/get",
                "https://jsonplaceholder.typicode.com/posts/1"
            ]
            
            all_urls = SELF_URLS + external_urls
            
            # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–µ –ø–∏–Ω–≥–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            with ThreadPoolExecutor(max_workers=10) as executor:
                results = list(executor.map(hyper_ping_worker, all_urls))
            
            ping_count += 1
            last_ping_time = datetime.now()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 –ø–∏–Ω–≥–æ–≤
            if ping_count % 10 == 0:
                success_count = sum(1 for r in results if '‚úÖ' in r)
                print(f"üéØ –ü–∏–Ω–≥ #{ping_count} | –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(all_urls)} | –í—Ä–µ–º—è: {last_ping_time.strftime('%H:%M:%S')}")
            
            # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É 30 –∏ 90 —Å–µ–∫—É–Ω–¥–∞–º–∏
            time.sleep(current_interval)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {e}")
            time.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

def start_hyper_ping():
    """–ó–∞–ø—É—Å–∫ –≥–∏–ø–µ—Ä-–ø–∏–Ω–≥–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    ping_thread = Thread(target=hyper_pinging)
    ping_thread.daemon = True
    ping_thread.start()
    print("üöÄ HYPER-PING –∑–∞–ø—É—â–µ–Ω! –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã: 30-90 —Å–µ–∫—É–Ω–¥")

# === –Ø–ù–î–ï–ö–° –î–ò–°–ö –•–†–ê–ù–ò–õ–ò–©–ï ===
class YandexDiskStorage:
    def __init__(self):
        self.token = YANDEX_TOKEN
        self.base_url = "https://cloud-api.yandex.net/v1/disk/resources"
        self.headers = {"Authorization": f"OAuth {self.token}"}
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.setup_folder()
    
    def setup_folder(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è –±–æ—Ç–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–µ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É
            response = requests.put(
                f"{self.base_url}?path=/kitty_bot", 
                headers=self.headers
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            response2 = requests.put(
                f"{self.base_url}?path=/kitty_bot/users", 
                headers=self.headers
            )
            
            if response.status_code in [201, 409]:
                print("‚úÖ –ü–∞–ø–∫–∞ kitty_bot –≥–æ—Ç–æ–≤–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–µ!")
                return True
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
            return False
    
    def save_user_data(self, user_data):
        try:
            user_id = user_data["user_id"]
            filename = f"kitty_bot/users/{user_id}.json"
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = f"temp_{user_id}.json"
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(user_data, f, ensure_ascii=False, indent=2, default=str)
            
            # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            upload_url = f"{self.base_url}/upload?path={filename}&overwrite=true"
            response = requests.get(upload_url, headers=self.headers)
            
            if response.status_code == 200:
                upload_data = response.json()
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                with open(temp_file, 'rb') as f:
                    upload_response = requests.put(upload_data['href'], files={'file': f})
                
                os.remove(temp_file)
                
                if upload_response.status_code == 201:
                    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {upload_response.status_code}")
                    return False
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
                os.remove(temp_file)
                return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ø–Ω–¥–µ–∫—Å: {e}")
            if os.path.exists(f"temp_{user_id}.json"):
                os.remove(f"temp_{user_id}.json")
            return False
    
    def load_user_data(self, user_id):
        try:
            filename = f"kitty_bot/users/{user_id}.json"
            download_url = f"{self.base_url}/download?path={filename}"
            response = requests.get(download_url, headers=self.headers)
            
            if response.status_code == 200:
                download_data = response.json()
                file_response = requests.get(download_data['href'])
                
                if file_response.status_code == 200:
                    user_data = json.loads(file_response.text)
                    print(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–∞")
                    return user_data
            
            print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–µ")
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ø–Ω–¥–µ–∫—Å: {e}")
            return None
    
    def user_exists(self, user_id):
        try:
            filename = f"kitty_bot/users/{user_id}.json"
            url = f"{self.base_url}?path={filename}"
            response = requests.get(url, headers=self.headers)
            return response.status_code == 200
        except:
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
storage = YandexDiskStorage()

# === –î–ê–ù–ù–´–ï –ò–ì–†–´ ===
CAT_IMAGES = ["cat1.jpg", "cat2.jpg", "cat3.jpg", "cat4.jpg", "cat5.jpg"]

DEFAULT_USER_DATA = {
    "user_id": None,
    "username": "",
    "coins": 50,
    "rating": 0,
    "created_at": None,
    "cat": {
        "name": "–ú—É—Ä–∑–∏–∫",
        "hunger": 5,
        "cleanliness": 5,
        "mood": 5,
        "health": 5,
        "last_update": None,
        "level": 1,
        "exp": 0,
        "care_count": 0,
        "photo_index": 0
    },
    "inventory": [],
    "tasks": {},
    "used_promocodes": [],
    "daily_care_count": 0,
    "last_care_date": None
}

CAT_NAME_OPTIONS = ["–ë–∞—Ä—Å–∏–∫", "–ú—É—Ä–∑–∏–∫", "–í–∞—Å—å–∫–∞", "–†—ã–∂–∏–∫", "–°–Ω–µ–∂–æ–∫", "–ü—É—à–æ–∫", "–ö—É–∑—è"]

TOYS = {
    'i1': {'name': 'i1', 'price': 20, 'emoji': 'üéæ', 'display_name': '–ú—è—á–∏–∫'},
    'i2': {'name': 'i2', 'price': 30, 'emoji': 'üêü', 'display_name': '–†—ã–±–∫–∞'},
    'i3': {'name': 'i3', 'price': 40, 'emoji': 'üéØ', 'display_name': '–ú–∏—à–µ–Ω—å'},
}

BEDS = {
    'bed1': {'name': 'bed1', 'price': 150, 'emoji': 'üõèÔ∏è', 'display_name': '–õ–µ–∂–∞–Ω–∫–∞ 1'},
    'bed2': {'name': 'bed2', 'price': 200, 'emoji': 'üè†', 'display_name': '–õ–µ–∂–∞–Ω–∫–∞ 2'},
}

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò ===
def get_user_data(user_id):
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
    if str(user_id) in users_db:
        return users_db[str(user_id)]
    
    # –ü–æ—Ç–æ–º –∏–∑ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–∞
    data = storage.load_user_data(user_id)
    if data:
        users_db[str(user_id)] = data
    return data

def save_user_data(user_data):
    try:
        user_id = user_data["user_id"]
        users_db[str(user_id)] = user_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        def async_save():
            storage.save_user_data(user_data)
        
        save_thread = Thread(target=async_save)
        save_thread.daemon = True
        save_thread.start()
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False

def user_exists(user_id):
    return str(user_id) in users_db or storage.user_exists(user_id)

def create_new_user(user_id, username):
    user_data = DEFAULT_USER_DATA.copy()
    user_data["user_id"] = user_id
    user_data["username"] = username
    user_data["created_at"] = datetime.now().isoformat()
    user_data["cat"]["last_update"] = datetime.now().isoformat()
    user_data["last_care_date"] = datetime.now().date().isoformat()
    
    user_data["cat"]["name"] = random.choice(CAT_NAME_OPTIONS)
    user_data["cat"]["photo_index"] = random.randint(0, len(CAT_IMAGES) - 1)
    
    if save_user_data(user_data):
        return user_data
    return None

def get_or_create_user(user_id, username):
    user_data = get_user_data(user_id)
    if user_data:
        return user_data
    return create_new_user(user_id, username)

def get_all_users():
    return list(users_db.values())

# === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    user_data = get_or_create_user(user.id, user.username or user.first_name)
    
    if user_data:
        caption = (
            f"üéâ –ü—Ä–∏–≤–µ—Ç–∏–∫! –ü–æ—Å–º–æ—Ç—Ä–∏! –ö—Ç–æ —ç—Ç–æ –≤ –∫–æ—Ä–æ–±–æ—á–∫–µ?\n\n"
            f"–ù–µ—É–∂–µ–ª–∏ –∫–æ—Ç–∏–∫? –≠—Ç–æ —Ç–≤–æ–π –Ω–æ–≤—ã–π –¥—Ä—É–≥ - {user_data['cat']['name']}!\n\n"
            f"–£—Ö–∞–∂–∏–≤–∞–π –∑–∞ –Ω–∏–º, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–æ–Ω–µ—Ç–∫–∏ –∏ –ø–æ–∫—É–ø–∞–π –∏–≥—Ä—É—à–∫–∏!\n\n"
            f"üí´ –ó–∞ —É—Ö–æ–¥ –∑–∞ –∫–æ—Ç–∏–∫–æ–º: +3 –º–æ–Ω–µ—Ç—ã\n"
            f"‚≠ê –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –º–æ–Ω–µ—Ç\n"
            f"üí´ –°–ª–µ–¥–∏ –∑–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –∫–æ—Ç–∏–∫–∞!"
        )
        
        await update.message.reply_text(
            caption,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üì¶ –û–¢–ö–†–´–¢–¨ –ö–û–†–û–ë–û–ß–ö–£", callback_data='open_box')]])
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def open_box(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    caption = (
        f"üéâ –ê –≤–æ—Ç –∏ —Ç–≤–æ–π –ª—É—á—à–∏–π –¥—Ä—É–≥ - {user_data['cat']['name']}!\n\n"
        f"–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –Ω–∏–º –≤ –º–µ–Ω—é —É—Ö–æ–¥–∞!\n\n"
        "ü™ô –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–æ–Ω–µ—Ç–∫–∏, —É—Ö–∞–∂–∏–≤–∞—è –∑–∞ –∫–æ—Ç–∏–∫–æ–º!\n"
        "üéÅ –ü–æ–∫—É–ø–∞–π –∏–≥—Ä—É—à–∫–∏ –∏ —É–ª—É—á—à–∞–π —Å–≤–æ–µ–≥–æ –∫–æ—Ç–∏–∫–∞!"
    )
    
    await query.edit_message_text(
        caption,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]])
    )

async def main_menu(query, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üò∫ –ú–æ–π –∫–æ—Ç–∏–∫", callback_data='my_cat')],
        [InlineKeyboardButton("üíñ –£—Ö–æ–¥ –∑–∞ –∫–æ—Ç–∏–∫–æ–º", callback_data='care_menu')],
        [InlineKeyboardButton("ü™ô –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç–∫–∏", callback_data='earn_coins')],
        [InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data='shop_menu')],
        [InlineKeyboardButton("‚≠ê –ü—Ä–æ–∫–∞—á–∫–∞", callback_data='upgrade_menu')],
        [InlineKeyboardButton("üìä –†–µ–π—Ç–∏–Ω–≥", callback_data='leaderboard')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data='instruction')]
    ]
    
    await query.edit_message_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n\n–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def instruction(query, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìñ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –£–•–û–î–£ –ó–ê –ö–û–¢–ò–ö–û–ú:\n\n"
        "üò∫ **–ú–æ–π –∫–æ—Ç–∏–∫** - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ç–∏–∫–∞\n"
        "üíñ **–£—Ö–æ–¥ –∑–∞ –∫–æ—Ç–∏–∫–æ–º** - –ø–æ–∫–æ—Ä–º–∏—Ç—å, –ø–æ—á–∏—Å—Ç–∏—Ç—å, –ø–æ–∏–≥—Ä–∞—Ç—å (+3 –º–æ–Ω–µ—Ç–∫–∏!)\n"
        "ü™ô **–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç–∫–∏** - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è\n"
        "üõí **–ú–∞–≥–∞–∑–∏–Ω** - –∫—É–ø–∏—Ç—å –∏–≥—Ä—É—à–∫–∏, –ª–µ–∂–∞–Ω–∫–∏\n"
        "‚≠ê **–ü—Ä–æ–∫–∞—á–∫–∞** - —É–ª—É—á—à–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–æ—Ç–∏–∫–∞\n"
        "üìä **–†–µ–π—Ç–∏–Ω–≥** - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤\n\n"
        "üí∞ **–ó–ê–†–ê–ë–û–¢–û–ö –ú–û–ù–ï–¢:**\n"
        "‚Ä¢ –£—Ö–æ–¥ –∑–∞ –∫–æ—Ç–∏–∫–æ–º: +3 –º–æ–Ω–µ—Ç—ã\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã: +5 –º–æ–Ω–µ—Ç\n"
        "‚Ä¢ –û—Ç–∑—ã–≤: +10 –º–æ–Ω–µ—Ç\n"
        "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞: +15 –º–æ–Ω–µ—Ç\n\n"
        "üí° **–°–û–í–ï–¢–´:**\n"
        "‚Ä¢ –°–ª–µ–¥–∏ –∑–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –∫–æ—Ç–∏–∫–∞\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ —É—Ö–∞–∂–∏–≤–∞–π –∑–∞ –Ω–∏–º\n"
        "‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –º–æ–Ω–µ—Ç–æ–∫"
    )
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]])
    )

async def care_menu(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    cat = user_data['cat']
    reward = 3
    
    keyboard = [
        [InlineKeyboardButton(f"üçñ –ü–æ–∫–æ—Ä–º–∏—Ç—å (+{reward}ü™ô)", callback_data='care_feed')],
        [InlineKeyboardButton(f"üõÅ –ü–æ–º—ã—Ç—å (+{reward}ü™ô)", callback_data='care_clean')],
        [InlineKeyboardButton(f"üéÆ –ü–æ–∏–≥—Ä–∞—Ç—å (+{reward}ü™ô)", callback_data='care_play')],
        [InlineKeyboardButton(f"üíä –õ–µ—á–∏—Ç—å (+{reward}ü™ô)", callback_data='care_heal')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    
    status_text = (
        f"üíñ –£–•–û–î –ó–ê –ö–û–¢–ò–ö–û–ú:\n\n"
        f"üò∫ –ò–º—è: {cat['name']}\n"
        f"üçñ –ì–æ–ª–æ–¥: {cat['hunger']}/10\n"
        f"üõÅ –ß–∏—Å—Ç–æ—Ç–∞: {cat['cleanliness']}/10\n"
        f"üéÆ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {cat['mood']}/10\n"
        f"üíä –ó–¥–æ—Ä–æ–≤—å–µ: {cat['health']}/10\n"
        f"‚≠ê –£—Ä–æ–≤–µ–Ω—å: {cat['level']}\n\n"
        f"üí∞ –¢–≤–æ–∏ –º–æ–Ω–µ—Ç–∫–∏: {user_data['coins']}\n"
        f"üéØ –£—Ö–æ–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {user_data.get('daily_care_count', 0)}/10\n"
        f"üíé –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—Ö–æ–¥: +{reward} –º–æ–Ω–µ—Ç"
    )
    
    await query.edit_message_text(
        status_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_care_action(query, context: ContextTypes.DEFAULT_TYPE, action):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    today = datetime.now().date().isoformat()
    last_care_date = user_data.get('last_care_date')
    
    if last_care_date != today:
        user_data['daily_care_count'] = 0
        user_data['last_care_date'] = today
    
    if user_data['daily_care_count'] >= 10:
        await query.answer("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É—Ö–æ–¥–æ–≤ (10/10). –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞!")
        return
    
    reward = 3
    cat = user_data['cat']
    
    if action == 'feed':
        cat['hunger'] = min(10, cat['hunger'] + 2)
        message = f"üçñ –¢—ã –ø–æ–∫–æ—Ä–º–∏–ª –∫–æ—Ç–∏–∫–∞! –ì–æ–ª–æ–¥ +2"
    elif action == 'clean':
        cat['cleanliness'] = min(10, cat['cleanliness'] + 2)
        message = f"üõÅ –¢—ã –ø–æ–º—ã–ª –∫–æ—Ç–∏–∫–∞! –ß–∏—Å—Ç–æ—Ç–∞ +2"
    elif action == 'play':
        cat['mood'] = min(10, cat['mood'] + 2)
        message = f"üéÆ –¢—ã –ø–æ–∏–≥—Ä–∞–ª —Å –∫–æ—Ç–∏–∫–æ–º! –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ +2"
    elif action == 'heal':
        cat['health'] = min(10, cat['health'] + 2)
        message = f"üíä –¢—ã –ø–æ–ª–µ—á–∏–ª –∫–æ—Ç–∏–∫–∞! –ó–¥–æ—Ä–æ–≤—å–µ +2"
    
    user_data['coins'] += reward
    user_data['daily_care_count'] += 1
    cat['care_count'] += 1
    cat['last_update'] = datetime.now().isoformat()
    
    cat['exp'] += 1
    if cat['exp'] >= cat['level'] * 5:
        cat['level'] += 1
        cat['exp'] = 0
        message += f"\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! {cat['name']} –¥–æ—Å—Ç–∏–≥ {cat['level']} —É—Ä–æ–≤–Ω—è!"
    
    message += f"\nüí∞ –ü–æ–ª—É—á–µ–Ω–æ {reward} –º–æ–Ω–µ—Ç –∑–∞ —É—Ö–æ–¥!"
    
    if save_user_data(user_data):
        await query.answer(message)
        await care_menu(query, context)
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")

async def earn_coins(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    daily_count = user_data.get('daily_care_count', 0)
    care_earnings = daily_count * 3
    
    keyboard = [
        [InlineKeyboardButton("üì± –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É (+5 –º–æ–Ω–µ—Ç)", callback_data='earn_ad')],
        [InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ (+10 –º–æ–Ω–µ—Ç)", callback_data='earn_review')],
        [InlineKeyboardButton("üì¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ (+15 –º–æ–Ω–µ—Ç)", callback_data='earn_invite')],
        [InlineKeyboardButton("üíñ –£—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –∫–æ—Ç–∏–∫–æ–º", callback_data='care_menu')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    
    await query.edit_message_text(
        f"ü™ô –ó–ê–†–ê–ë–û–¢–û–ö –ú–û–ù–ï–¢–û–ö:\n\n"
        f"üí∞ –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: {user_data['coins']}\n"
        f"üíñ –£—Ö–æ–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {daily_count}/10\n"
        f"üíé –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ —É—Ö–æ–¥: +{care_earnings} –º–æ–Ω–µ—Ç\n\n"
        f"üí° **–°–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞:**\n"
        f"‚Ä¢ –£—Ö–æ–¥ –∑–∞ –∫–æ—Ç–∏–∫–æ–º: +3 –º–æ–Ω–µ—Ç—ã\n"
        f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã: +5 –º–æ–Ω–µ—Ç\n"
        f"‚Ä¢ –û—Ç–∑—ã–≤: +10 –º–æ–Ω–µ—Ç\n"
        f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞: +15 –º–æ–Ω–µ—Ç",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_earn_action(query, context: ContextTypes.DEFAULT_TYPE, action):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    earnings = {'ad': 5, 'review': 10, 'invite': 15}
    task_key = f"earn_{action}"
    
    today = datetime.now().date().isoformat()
    if task_key in user_data['tasks'] and user_data['tasks'][task_key] == today:
        await query.answer("‚ùå –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è!")
        return
    
    user_data['coins'] += earnings[action]
    user_data['tasks'][task_key] = today
    
    messages = {
        'ad': "üì± –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã! +5 –º–æ–Ω–µ—Ç",
        'review': "‚úçÔ∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! +10 –º–æ–Ω–µ—Ç", 
        'invite': "üì¢ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞! +15 –º–æ–Ω–µ—Ç"
    }
    
    if save_user_data(user_data):
        await query.answer(messages[action])
        await earn_coins(query, context)
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")

async def my_cat(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    cat = user_data['cat']
    daily_count = user_data.get('daily_care_count', 0)
    
    status = "üòä –û—Ç–ª–∏—á–Ω–æ"
    if any(stat <= 3 for stat in [cat['hunger'], cat['cleanliness'], cat['mood'], cat['health']]):
        status = "üòê –ù—É–∂–µ–Ω —É—Ö–æ–¥"
    if any(stat <= 1 for stat in [cat['hunger'], cat['cleanliness'], cat['mood'], cat['health']]):
        status = "üò® –û–ø–∞—Å–Ω–æ!"
    
    text = (
        f"üò∫ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–¢–ò–ö–ï:\n\n"
        f"üìõ –ò–º—è: {cat['name']}\n"
        f"‚≠ê –£—Ä–æ–≤–µ–Ω—å: {cat['level']}\n"
        f"üìä –û–ø—ã—Ç: {cat['exp']}/{cat['level'] * 5}\n"
        f"üéØ –°—Ç–∞—Ç—É—Å: {status}\n\n"
        f"üìä –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:\n"
        f"üçñ –ì–æ–ª–æ–¥: {cat['hunger']}/10\n"
        f"üõÅ –ß–∏—Å—Ç–æ—Ç–∞: {cat['cleanliness']}/10\n"
        f"üéÆ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {cat['mood']}/10\n"
        f"üíä –ó–¥–æ—Ä–æ–≤—å–µ: {cat['health']}/10\n\n"
        f"üí∞ –ú–æ–Ω–µ—Ç–∫–∏: {user_data['coins']}\n"
        f"‚ù§Ô∏è –í—Å–µ–≥–æ —É—Ö–æ–¥–æ–≤: {cat['care_count']}\n"
        f"üìÖ –£—Ö–æ–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {daily_count}/10\n"
        f"üíé –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—Ö–æ–¥: +3 –º–æ–Ω–µ—Ç—ã"
    )
    
    keyboard = [
        [InlineKeyboardButton("üíñ –£—Ö–∞–∂–∏–≤–∞—Ç—å (+3 –º–æ–Ω–µ—Ç—ã)", callback_data='care_menu')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def shop_menu(query, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üéÆ –ò–≥—Ä—É—à–∫–∏", callback_data='toys_shop')],
        [InlineKeyboardButton("üõèÔ∏è –õ–µ–∂–∞–Ω–∫–∏", callback_data='beds_shop')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    
    await query.edit_message_text(
        "üõí –ú–ê–ì–ê–ó–ò–ù:\n\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def toys_shop(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    keyboard = []
    for toy_id, toy in TOYS.items():
        has_toy = any(item['name'] == toy_id for item in user_data['inventory'])
        status = "‚úÖ –ö—É–ø–ª–µ–Ω–æ" if has_toy else f"ü™ô {toy['price']} –º–æ–Ω–µ—Ç"
        button_text = f"{toy['emoji']} {toy['display_name']} - {status}"
        if not has_toy:
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f'buy_{toy_id}')])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='shop_menu')])
    
    await query.edit_message_text(
        f"üéÆ –ú–ê–ì–ê–ó–ò–ù –ò–ì–†–£–®–ï–ö:\n\n"
        f"üí∞ –¢–≤–æ–∏ –º–æ–Ω–µ—Ç–∫–∏: {user_data['coins']}\n\n"
        f"–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É—à–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def beds_shop(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    keyboard = []
    for bed_id, bed in BEDS.items():
        has_bed = any(item['name'] == bed_id for item in user_data['inventory'])
        status = "‚úÖ –ö—É–ø–ª–µ–Ω–æ" if has_bed else f"ü™ô {bed['price']} –º–æ–Ω–µ—Ç"
        button_text = f"{bed['emoji']} {bed['display_name']} - {status}"
        if not has_bed:
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f'buy_{bed_id}')])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='shop_menu')])
    
    await query.edit_message_text(
        f"üõèÔ∏è –ú–ê–ì–ê–ó–ò–ù –õ–ï–ñ–ê–ù–û–ö:\n\n"
        f"üí∞ –¢–≤–æ–∏ –º–æ–Ω–µ—Ç–∫–∏: {user_data['coins']}\n\n"
        f"–í—ã–±–µ—Ä–∏ –ª–µ–∂–∞–Ω–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_buy_action(query, context: ContextTypes.DEFAULT_TYPE, item_id):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    if item_id in TOYS:
        item_data = TOYS[item_id]
        category = 'toys_shop'
        price = item_data['price']
        user_balance = user_data['coins']
    elif item_id in BEDS:
        item_data = BEDS[item_id]
        category = 'beds_shop'
        price = item_data['price']
        user_balance = user_data['coins']
    else:
        await query.answer("‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ!")
        return
    
    if user_balance < price:
        await query.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ {price} –º–æ–Ω–µ—Ç.")
        return
    
    if item_id in TOYS or item_id in BEDS:
        if any(item['name'] == item_id for item in user_data['inventory']):
            await query.answer("‚ùå –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            return
    
    user_data['coins'] -= price
    user_data['inventory'].append({
        'name': item_id,
        'type': 'toy' if item_id in TOYS else 'bed',
        'purchased_at': datetime.now().isoformat()
    })
    success_message = f"‚úÖ –¢—ã –∫—É–ø–∏–ª {item_data['display_name']}!"
    
    if save_user_data(user_data):
        await query.answer(success_message)
        if category == 'toys_shop':
            await toys_shop(query, context)
        elif category == 'beds_shop':
            await beds_shop(query, context)
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")

async def upgrade_cat_menu(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    cat = user_data['cat']
    
    keyboard = [
        [InlineKeyboardButton(f"üçñ –£–ª—É—á—à–∏—Ç—å –≥–æ–ª–æ–¥ (10 –º–æ–Ω–µ—Ç) - —É—Ä. {cat['hunger']}", callback_data='upgrade_hunger')],
        [InlineKeyboardButton(f"üõÅ –£–ª—É—á—à–∏—Ç—å —á–∏—Å—Ç–æ—Ç—É (10 –º–æ–Ω–µ—Ç) - —É—Ä. {cat['cleanliness']}", callback_data='upgrade_cleanliness')],
        [InlineKeyboardButton(f"üéÆ –£–ª—É—á—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (10 –º–æ–Ω–µ—Ç) - —É—Ä. {cat['mood']}", callback_data='upgrade_mood')],
        [InlineKeyboardButton(f"üíä –£–ª—É—á—à–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ (10 –º–æ–Ω–µ—Ç) - —É—Ä. {cat['health']}", callback_data='upgrade_health')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    
    await query.edit_message_text(
        "‚≠ê –ü–†–û–ö–ê–ß–ö–ê –ö–û–¢–ò–ö–ê:\n\n"
        "–£–ª—É—á—à–∞–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–≤–æ–µ–≥–æ –∫–æ—Ç–∏–∫–∞!\n"
        f"üí∞ –¢–≤–æ–∏ –º–æ–Ω–µ—Ç–∫–∏: {user_data['coins']}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_upgrade_action(query, context: ContextTypes.DEFAULT_TYPE, action):
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    cost = 10
    
    if user_data['coins'] < cost:
        await query.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ {cost} –º–æ–Ω–µ—Ç.")
        return
    
    cat = user_data['cat']
    stat_names = {
        'hunger': '–≥–æ–ª–æ–¥',
        'cleanliness': '—á–∏—Å—Ç–æ—Ç—É', 
        'mood': '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
        'health': '–∑–¥–æ—Ä–æ–≤—å–µ'
    }
    
    if cat[action] >= 10:
        await query.answer(f"‚ùå {stat_names[action].title()} —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!")
        return
    
    cat[action] += 1
    user_data['coins'] -= cost
    
    if save_user_data(user_data):
        await query.answer(f"‚úÖ –¢—ã —É–ª—É—á—à–∏–ª {stat_names[action]} –∫–æ—Ç–∏–∫–∞ –¥–æ —É—Ä–æ–≤–Ω—è {cat[action]}!")
        await upgrade_cat_menu(query, context)
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")

async def show_leaderboard(query, context: ContextTypes.DEFAULT_TYPE):
    users = get_all_users()
    
    for user in users:
        if 'cat' in user:
            cat = user['cat']
            rating = cat['level'] * 10 + cat['care_count']
            user['calculated_rating'] = rating
    
    users.sort(key=lambda x: x.get('calculated_rating', 0), reverse=True)
    
    text = "üìä –¢–û–ü-10 –ò–ì–†–û–ö–û–í:\n\n"
    
    for i, user in enumerate(users[:10], 1):
        username = user.get('username', f"–ò–≥—Ä–æ–∫ {user.get('user_id', 'Unknown')}")
        cat = user.get('cat', {})
        text += f"{i}. {username} - ‚≠ê –£—Ä. {cat.get('level', 1)} | ‚ù§Ô∏è {cat.get('care_count', 0)} —É—Ö–æ–¥–æ–≤\n"
    
    if not users:
        text += "–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == 'open_box':
        await open_box(query, context)
    elif data == 'main_menu':
        await main_menu(query, context)
    elif data == 'instruction':
        await instruction(query, context)
    elif data == 'care_menu':
        await care_menu(query, context)
    elif data == 'care_feed':
        await handle_care_action(query, context, 'feed')
    elif data == 'care_clean':
        await handle_care_action(query, context, 'clean')
    elif data == 'care_play':
        await handle_care_action(query, context, 'play')
    elif data == 'care_heal':
        await handle_care_action(query, context, 'heal')
    elif data == 'earn_coins':
        await earn_coins(query, context)
    elif data == 'earn_ad':
        await handle_earn_action(query, context, 'ad')
    elif data == 'earn_review':
        await handle_earn_action(query, context, 'review')
    elif data == 'earn_invite':
        await handle_earn_action(query, context, 'invite')
    elif data == 'my_cat':
        await my_cat(query, context)
    elif data == 'shop_menu':
        await shop_menu(query, context)
    elif data == 'toys_shop':
        await toys_shop(query, context)
    elif data == 'beds_shop':
        await beds_shop(query, context)
    elif data.startswith('buy_'):
        item_id = data.replace('buy_', '')
        await handle_buy_action(query, context, item_id)
    elif data == 'upgrade_menu':
        await upgrade_cat_menu(query, context)
    elif data == 'upgrade_hunger':
        await handle_upgrade_action(query, context, 'hunger')
    elif data == 'upgrade_cleanliness':
        await handle_upgrade_action(query, context, 'cleanliness')
    elif data == 'upgrade_mood':
        await handle_upgrade_action(query, context, 'mood')
    elif data == 'upgrade_health':
        await handle_upgrade_action(query, context, 'health')
    elif data == 'leaderboard':
        await show_leaderboard(query, context)

# === –ó–ê–ü–£–°–ö –í–°–ï–ì–û ===
def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    app.run(host='0.0.0.0', port=8080, debug=False)

def keep_alive():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è 24/7"""
    # 1. Flask —Å–µ—Ä–≤–µ—Ä
    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    # 2. –ì–∏–ø–µ—Ä-–ø–∏–Ω–≥–∏ (—á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞)
    time.sleep(10)
    start_hyper_ping()
    
    print("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω—ã –¥–ª—è 24/7 —Ä–∞–±–æ—Ç—ã!")

# –ó–∞–ø—É—Å–∫–∞–µ–º –í–°–ï —Å—Ä–∞–∑—É
keep_alive()

# === –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
def main() -> None:
    print("üöÄ –ó–ê–ü–£–°–ö KITTY BOT 24/7 MODE")
    print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üéØ Replit: {REPL_OWNER}.{REPL_SLUG}")
    print("üéØ –¶–µ–ª—å: 20-24 —á–∞—Å–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("status", lambda u,c: u.message.reply_text("üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7!")))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ 24/7!")
    print("üîß HYPER-PING –∞–∫—Ç–∏–≤–µ–Ω –∫–∞–∂–¥—ã–µ 30-90 —Å–µ–∫—É–Ω–¥")
    
    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True
    )

if __name__ == '__main__':
    main()
